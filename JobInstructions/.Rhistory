dplyr:: arrange(Country)
DF.UK <- as.data.frame(x) %>%
tidyr:: gather(key = Reporting.Period, value = Position) %>%
`colnames<-`(c("Country", "Period", "Position")) %>%
dplyr:: filter(Position != "CQ_A2", Country == "UK") %>%
dplyr:: mutate(Data.Element = "CQ_A2", Position = as.numeric(Position)) %>%
dplyr:: arrange(Country)
p<-  ggplot2:: ggplot(data = DF, ggplot2:: aes(x = Period, y = Position)) +
ggplot2:: geom_bar( size = 0.8, ggplot2:: aes(x = Period, y = Position, fill= (Country)),    stat="identity", data = DF, position = "dodge") +
#ggplot2:: geom_line( size = 1, ggplot2:: aes(x = Period, y = Position, group = Country, colour = Country), data = DF.UK) +
#ggplot2:: geom_point(size = 2, ggplot2:: aes(x = Period, y = Position),color = "black", data = DF.UK) +
ggplot2:: labs(title = "Chart 1: Plot of number of submissions received, by region", subtitle = "Original Series", y= "Position" , x=NULL) +
ggplot2::scale_colour_manual(values = unname(c("black"))) +
ggplot2:: guides(fill = ggplot2::guide_legend( keywidth = 4, keyheight = 1, reverse = FALSE, nrow = 2, title = NULL)) +
ggplot2::theme(panel.grid.major.y = ggplot2::element_line(colour = "grey"),
axis.line.x = ggplot2::element_line(colour = "grey"),
axis.line.y = ggplot2::element_line(colour = "grey"),
axis.ticks.x = ggplot2::element_line(colour = "grey"),
axis.ticks.y = ggplot2::element_line(colour = "grey"),
plot.caption = ggplot2::element_text(colour = "grey50", hjust = 1),
panel.background = ggplot2:: element_rect(fill = "white", colour = "grey50"),
panel.grid.minor.y = ggplot2:: element_blank(), legend.position = "bottom") +
ggplot2:: scale_y_continuous(position = "right") +
ggplot2::scale_fill_manual(values = unname(boe_cols[c("red", "black", "stone", "dark_teal")]))
return(p)
},
warning = function() {
w <- warnings()
warning('Warning produced running chart_1_part_1():', w)
},
error = function(e)  {
stop('Error produced running chart_1_part_1():', e)
},
finally = {}
)
}
chart_1_part_1(CQ_Combine)
chart_1_part_1<- function(x) {
out <- tryCatch(
expr = {
x <- CQ %>%
dplyr::arrange(desc(Quarter)) %>%
dplyr::filter(Data.Element == "CQ_A2") %>%
dplyr:: group_by(Country, Quarter) %>%
dplyr:: add_tally() %>%
dplyr:: distinct(Country, Quarter, .keep_all = TRUE) %>%
dplyr:: select(Data.Element, Country, Quarter, n) %>%
dplyr::slice(1:5) %>%
dplyr:: group_by(Data.Element, Quarter)
UK <- x %>%
dplyr:: summarise(Country = as.character("UK"),
n = sum(n)) %>%
dplyr:: bind_rows( .)
x<-  rbind(x, UK)
# create wide representation of the data
x <- tidyr::spread(x, key=Quarter, value=n)
names<-  data.frame(a = c("UK", "England", "Scotland", "Wales","Northern Ireland"))
x<- x[match(names$a, x$Country),]
colnames(x)[1] <- ""
colnames(x)[2] <- ""
DF <- as.data.frame(x) %>%
tidyr:: gather(key = Reporting.Period, value = Position) %>%
`colnames<-`(c("Country", "Period", "Position")) %>%
dplyr:: filter(Position != "CQ_A2", Country != "UK") %>%
dplyr:: mutate(Data.Element = "CQ_A2", Position = as.numeric(Position)) %>%
dplyr:: arrange(Country)
DF.UK <- as.data.frame(x) %>%
tidyr:: gather(key = Reporting.Period, value = Position) %>%
`colnames<-`(c("Country", "Period", "Position")) %>%
dplyr:: filter(Position != "CQ_A2", Country == "UK") %>%
dplyr:: mutate(Data.Element = "CQ_A2", Position = as.numeric(Position)) %>%
dplyr:: arrange(Country)
p<-  ggplot2:: ggplot(data = DF, ggplot2:: aes(x = Period, y = Position)) +
ggplot2:: geom_bar( size = 0.8, ggplot2:: aes(x = Period, y = Position, fill= (Country)),    stat="identity", data = DF, position = "dodge") +
#ggplot2:: geom_line( size = 1, ggplot2:: aes(x = Period, y = Position, group = Country, colour = Country), data = DF.UK) +
#ggplot2:: geom_point(size = 2, ggplot2:: aes(x = Period, y = Position),color = "black", data = DF.UK) +
ggplot2:: labs(title = "Chart 1: Plot of number of submissions received, by region", subtitle = "Original Series", y= "Position" , x=NULL) +
ggplot2::scale_colour_manual(values = unname(c("black"))) +
ggplot2:: guides(fill = ggplot2::guide_legend( keywidth = 4, keyheight = 1, reverse = FALSE, nrow = 2, title = NULL)) +
ggplot2::theme(panel.grid.major.y = ggplot2::element_line(colour = "grey"),
axis.line.x = ggplot2::element_line(colour = "grey"),
axis.line.y = ggplot2::element_line(colour = "grey"),
axis.ticks.x = ggplot2::element_line(colour = "grey"),
axis.ticks.y = ggplot2::element_line(colour = "grey"),
plot.caption = ggplot2::element_text(colour = "grey50", hjust = 1),
panel.background = ggplot2:: element_rect(fill = "white", colour = "grey50"),
panel.grid.minor.y = ggplot2:: element_blank(), legend.position = "bottom") +
ggplot2:: scale_y_continuous(position = "right") +
ggplot2::scale_fill_manual(values = unname(boe_cols[c("red", "black", "stone", "dark_teal")])) + ggplot2:: coord_flip()
return(p)
},
warning = function() {
w <- warnings()
warning('Warning produced running chart_1_part_1():', w)
},
error = function(e)  {
stop('Error produced running chart_1_part_1():', e)
},
finally = {}
)
}
chart_1_part_1(CQ_Combine)
devtools:: load_all("N:/DATA/RDG/Credit Union Data/Publication/Credit Union RAP/CreditUnionRAP")
CQ <- CreditUnionRAP:: read_CQ_vo(periods = reporting.periods)
CQ_Missing <- CreditUnionRAP:: read_CQ_missing(periods = reporting.periods)
#combine the CQ data and missing entries
CQ_Combine <- dplyr:: bind_rows(CQ, CQ_Missing)
CreditUnionRAP:: chart_1_part_1(CQ_Combine)
devtools:: install("N:/DATA/RDG/Credit Union Data/Publication/Credit Union RAP/CreditUnionRAP")
library(CreditUnionRAP)
library(CreditUnionRAP)
reportingPeriods <<- c("2017Q2","2017Q3", "2017Q4", "2018Q1", "2018Q2" , "2018Q3")
# select whether to load the latest data - TRUE means load latest
# SII data last updated 27/11/2018
GET.LATEST.DATA = FALSE
# source relevant scripts
source("N:/DATA/RDG/RDG Project/Strategic Plan/Shiny App/app.R")
# Run the application
shinyApp(ui = ui, server = server)
load("N:/DATA/RDG/RDG Project/R/Analysis for data quality report/CompletionRat.Rda")
load("N:/DATA/RDG/RDG Project/R/Analysis for data quality report/CompletionChk.Rda")
View(CompletionChk)
ncol(CompletionChk)
x =
dplyr:: select(CompletionChk, -External, -ECAI,-Internal) %>%
tidyr:: gather(key = Data.Element, value = Position, -ReportingPeriod) %>%
tidyr:: spread(key = ReportingPeriod, value = Position)
formattable:: formattable(x = x[c(1,3,4,5,6,7,8,9,10,11,24:30),])
library(dplyr)
x =
dplyr:: select(CompletionChk, -External, -ECAI,-Internal) %>%
tidyr:: gather(key = Data.Element, value = Position, -ReportingPeriod) %>%
tidyr:: spread(key = ReportingPeriod, value = Position)
formattable:: formattable(x = x[c(1,3,4,5,6,7,8,9,10,11,24:30),])
x =
dplyr:: select(CompletionChk, -External, -ECAI,-Internal) %>%
tidyr:: gather(key = Data.Element, value = Position, -ReportingPeriod) %>%
tidyr:: spread(key = ReportingPeriod, value = Position)
View(x)
#specify reporting periods of interest
reportingPeriods <<- c("2017Q2","2017Q3", "2017Q4", "2018Q1", "2018Q2" , "2018Q3")
# select whether to load the latest data - TRUE means load latest
# SII data last updated 27/11/2018
GET.LATEST.DATA = FALSE
# source relevant scripts
source("N:/DATA/RDG/RDG Project/Strategic Plan/Shiny App/app.R")
threshold_per = 30
threshold_mat = 2
DF = S.02.A
Period_1 = "2018Q3"
Period_2 = "2018Q2"
firm = "Abbey Life"
formattable:: formattable(x = x[c(1,2,3,4,5,6,7,8,13,18,19),])
input.date <- rlang::sym(Period_1)
input.date2 <- rlang::sym(Period_2)
cell_names<- cell_names[grep(paste(template_code, sep = ""), cell_names$`Cell Ref Code`),] %>%
dplyr:: select(`Row Name`, `Col Name`,`Cell Ref Code`)
template_code = "S.02"
cell_names<- cell_names[grep(paste(template_code, sep = ""), cell_names$`Cell Ref Code`),] %>%
dplyr:: select(`Row Name`, `Col Name`,`Cell Ref Code`)
DF[DF == 0] = NA
Total_Assets = S.02.A %>%
dplyr:: filter(`Cell Ref Code` == "S.02.01R0500C0010", `Entity Short Name` == firm, reportingPeriod %in% c(Period_1)) %>%
dplyr:: rename("Total Assets" = "Observation Value GBP") %>%
dplyr:: select(`Entity Short Name`, reportingPeriod, `Total Assets`)
if(nrow(Total_Assets) != 1){
Total_Assets <- tibble:: as.tibble(25000000)
}
Summary <- DF %>%
dplyr:: filter(`Entity Short Name` == firm) %>%
dplyr:: group_by(`Cell Ref Code`, `Entity Short Name`) %>%
dplyr:: arrange(reportingPeriod, .by_group = TRUE) %>%
dplyr:: mutate(pct.chg = round(100 * ((`Observation Value GBP` - lag(`Observation Value GBP`))/lag(`Observation Value GBP`)),2)) %>%
dplyr:: summarise(avg=mean(pct.chg, na.rm = TRUE), n=n(), sd=sd(pct.chg,  na.rm = TRUE)) %>%
dplyr:: mutate_if(is.numeric, funs(replace(., is.na(.), 0))) %>%
dplyr:: mutate(upper_bound = (avg+ 2*sd) , lower_bound = (avg - 2*sd))
View(Summary)
Table <- DF %>%
dplyr:: left_join(cell_names, by = "Cell Ref Code") %>%
dplyr:: filter(`Entity Short Name` == firm) %>%
tidyr:: drop_na_("Observation Value GBP") %>%
dplyr:: group_by(`Cell Ref Code`, `Entity Short Name`) %>%
dplyr:: arrange(reportingPeriod, .by_group = TRUE) %>%
tidyr:: spread(key = reportingPeriod, value = `Observation Value GBP`) %>%
dplyr:: mutate_if(is.numeric, funs(replace(., is.na(.), 0))) %>%
dplyr:: mutate(pct.chg = round((!! input.date - !! input.date2)/!! input.date2*100,2), real.chg = round((!! input.date - !! input.date2),2)) %>%
dplyr:: mutate(`Total Assets` = ifelse(is.null(Total_Assets$`Total Assets`), 1000000000, Total_Assets$`Total Assets`)) %>%
dplyr:: mutate(ctr.chg = round(real.chg/abs(`Total Assets`)*100,2)) %>%
dplyr:: ungroup() %>%
dplyr:: left_join(Summary, by = c("Entity Short Name", "Cell Ref Code")) %>%
dplyr:: mutate(TEST_Per = ifelse(pct.chg > threshold_per | pct.chg < -threshold_per, "FAIL", "PASS"),
TEST_SD = ifelse(pct.chg > upper_bound | pct.chg < lower_bound, "FAIL", "PASS"),
TEST_Mat = ifelse(ctr.chg > threshold_mat | ctr.chg < -threshold_mat, "FAIL", "PASS")) %>%
dplyr:: mutate(n.fail =  rowCounts(as.matrix(.), value = "FAIL")) %>%
dplyr:: select(-`Total Assets`, -avg, -n, -sd, -upper_bound, -lower_bound ) %>%
dplyr::mutate_if(is.numeric, funs(prettyNum(., big.mark=",")))
View(Table)
Table <- DF %>%
dplyr:: left_join(cell_names, by = "Cell Ref Code") %>%
dplyr:: filter(`Entity Short Name` == firm) %>%
tidyr:: drop_na_("Observation Value GBP") %>%
dplyr:: group_by(`Cell Ref Code`, `Entity Short Name`) %>%
dplyr:: arrange(reportingPeriod, .by_group = TRUE) %>%
tidyr:: spread(key = reportingPeriod, value = `Observation Value GBP`) %>%
dplyr:: mutate_if(is.numeric, funs(replace(., is.na(.), 0))) %>%
dplyr:: mutate(pct.chg = round((!! input.date - !! input.date2)/!! input.date2*100,2), real.chg = round((!! input.date - !! input.date2),2)) %>%
dplyr:: mutate(`Total Assets` = ifelse(is.null(Total_Assets$`Total Assets`), 1000000000, Total_Assets$`Total Assets`)) %>%
dplyr:: mutate(ctr.chg = round(real.chg/abs(`Total Assets`)*100,2)) %>%
dplyr:: ungroup() %>%
dplyr:: left_join(Summary, by = c("Entity Short Name", "Cell Ref Code")) %>%
dplyr:: mutate(TEST_Per = ifelse(pct.chg > threshold_per | pct.chg < -threshold_per, "FAIL", "PASS"),
TEST_SD = ifelse(pct.chg > upper_bound | pct.chg < lower_bound, "FAIL", "PASS"),
TEST_Mat = ifelse(ctr.chg > threshold_mat | ctr.chg < -threshold_mat, "FAIL", "PASS")) %>%
dplyr:: mutate(n.fail =  rowCounts(as.matrix(.), value = "FAIL"))
DF = S.02.A
Period_1 = "2018Q3"
Period_2 = "2018Q2"
firm = "Abbey Life"
template_code = "S.02"
triage_plausi_DF <- function(DF, firm, template_code, Period_1, Period_2, threshold_per = 30, threshold_mat = 2){
input.date <- rlang::sym(Period_1)
input.date2 <- rlang::sym(Period_2)
cell_names<- cell_names[grep(paste(template_code, sep = ""), cell_names$`Cell Ref Code`),] %>%
dplyr:: select(`Row Name`, `Col Name`,`Cell Ref Code`)
DF[DF == 0] = NA
Total_Assets = S.02.A %>%
dplyr:: filter(`Cell Ref Code` == "S.02.01R0500C0010", `Entity Short Name` == firm, reportingPeriod %in% c(Period_1)) %>%
dplyr:: rename("Total Assets" = "Observation Value GBP") %>%
dplyr:: select(`Entity Short Name`, reportingPeriod, `Total Assets`)
if(nrow(Total_Assets) != 1){
Total_Assets <- tibble:: as.tibble(25000000)
}
Summary <- DF %>%
dplyr:: filter(`Entity Short Name` == firm) %>%
dplyr:: group_by(`Cell Ref Code`, `Entity Short Name`) %>%
dplyr:: arrange(reportingPeriod, .by_group = TRUE) %>%
dplyr:: mutate(pct.chg = round(100 * ((`Observation Value GBP` - lag(`Observation Value GBP`))/lag(`Observation Value GBP`)),2)) %>%
dplyr:: summarise(avg=mean(pct.chg, na.rm = TRUE), n=n(), sd=sd(pct.chg,  na.rm = TRUE)) %>%
dplyr:: mutate_if(is.numeric, funs(replace(., is.na(.), 0))) %>%
dplyr:: mutate(upper_bound = (avg+ 1.6*sd) , lower_bound = (avg - 1.6*sd))
Table <- DF %>%
dplyr:: left_join(cell_names, by = "Cell Ref Code") %>%
dplyr:: filter(`Entity Short Name` == firm) %>%
tidyr:: drop_na_("Observation Value GBP") %>%
dplyr:: group_by(`Cell Ref Code`, `Entity Short Name`) %>%
dplyr:: arrange(reportingPeriod, .by_group = TRUE) %>%
tidyr:: spread(key = reportingPeriod, value = `Observation Value GBP`) %>%
dplyr:: mutate_if(is.numeric, funs(replace(., is.na(.), 0))) %>%
dplyr:: mutate(pct.chg = round((!! input.date - !! input.date2)/!! input.date2*100,2), real.chg = round((!! input.date - !! input.date2),2)) %>%
dplyr:: mutate(`Total Assets` = ifelse(is.null(Total_Assets$`Total Assets`), 1000000000, Total_Assets$`Total Assets`)) %>%
dplyr:: mutate(ctr.chg = round(real.chg/abs(`Total Assets`)*100,2)) %>%
dplyr:: ungroup() %>%
dplyr:: left_join(Summary, by = c("Entity Short Name", "Cell Ref Code")) %>%
dplyr:: mutate(TEST_Per = ifelse(pct.chg > threshold_per | pct.chg < -threshold_per, "FAIL", "PASS"),
TEST_SD = ifelse(pct.chg > upper_bound | pct.chg < lower_bound, "FAIL", "PASS"),
TEST_Mat = ifelse(ctr.chg > threshold_mat | ctr.chg < -threshold_mat, "FAIL", "PASS")) %>%
dplyr:: mutate(n.fail =  rowCounts(as.matrix(.), value = "FAIL")) %>%
dplyr:: select(-`Total Assets`, -avg, -n, -sd, -upper_bound, -lower_bound ) %>%
dplyr::mutate_if(is.numeric, funs(prettyNum(., big.mark=",")))
Table <- Table[,c(which(!colnames(Table) %in% c("pct.chg","real.chg","ctr.chg", "n.fail")), which(colnames(Table) %in% c("pct.chg","real.chg","ctr.chg", "n.fail")))]
return(Table)
}
triage_plausi_DF()
triage_plausi_DF <- function(DF, firm, template_code, Period_1, Period_2, threshold_per = 30, threshold_mat = 2){
input.date <- rlang::sym(Period_1)
input.date2 <- rlang::sym(Period_2)
cell_names<- cell_names[grep(paste(template_code, sep = ""), cell_names$`Cell Ref Code`),] %>%
dplyr:: select(`Row Name`, `Col Name`,`Cell Ref Code`)
DF[DF == 0] = NA
# Total_Assets = S.02.A %>%
#   dplyr:: filter(`Cell Ref Code` == "S.02.01R0500C0010", `Entity Short Name` == firm, reportingPeriod %in% c(Period_1)) %>%
#   dplyr:: rename("Total Assets" = "Observation Value GBP") %>%
#   dplyr:: select(`Entity Short Name`, reportingPeriod, `Total Assets`)
#
# if(nrow(Total_Assets) != 1){
Total_Assets <- tibble:: as.tibble(25000000)
Summary <- DF %>%
#dplyr:: filter(`Entity Short Name` == firm) %>%
dplyr:: group_by(`Cell Ref Code`, `Entity Short Name`) %>%
dplyr:: arrange(reportingPeriod, .by_group = TRUE) %>%
dplyr:: mutate(pct.chg = round(100 * ((`Observation Value GBP` - lag(`Observation Value GBP`))/lag(`Observation Value GBP`)),2)) %>%
dplyr:: summarise(avg=mean(pct.chg, na.rm = TRUE), n=n(), sd=sd(pct.chg,  na.rm = TRUE)) %>%
dplyr:: mutate_if(is.numeric, funs(replace(., is.na(.), 0))) %>%
dplyr:: mutate(upper_bound = (avg+ 1.6*sd) , lower_bound = (avg - 1.6*sd))
Table <- DF %>%
dplyr:: left_join(cell_names, by = "Cell Ref Code") %>%
#dplyr:: filter(`Entity Short Name` == firm) %>%
tidyr:: drop_na_("Observation Value GBP") %>%
dplyr:: group_by(`Cell Ref Code`, `Entity Short Name`) %>%
dplyr:: arrange(reportingPeriod, .by_group = TRUE) %>%
tidyr:: spread(key = reportingPeriod, value = `Observation Value GBP`) %>%
dplyr:: mutate_if(is.numeric, funs(replace(., is.na(.), 0))) %>%
dplyr:: mutate(pct.chg = round((!! input.date - !! input.date2)/!! input.date2*100,2), real.chg = round((!! input.date - !! input.date2),2)) %>%
dplyr:: mutate(`Total Assets` = ifelse(is.null(Total_Assets$`Total Assets`), 1000000000, Total_Assets$`Total Assets`)) %>%
dplyr:: mutate(ctr.chg = round(real.chg/abs(`Total Assets`)*100,2)) %>%
dplyr:: ungroup() %>%
dplyr:: left_join(Summary, by = c("Entity Short Name", "Cell Ref Code")) %>%
dplyr:: mutate(TEST_Per = ifelse(pct.chg > threshold_per | pct.chg < -threshold_per, "FAIL", "PASS"),
TEST_SD = ifelse(pct.chg > upper_bound | pct.chg < lower_bound, "FAIL", "PASS"),
TEST_Mat = ifelse(ctr.chg > threshold_mat | ctr.chg < -threshold_mat, "FAIL", "PASS")) %>%
dplyr:: mutate(n.fail =  rowCounts(as.matrix(.), value = "FAIL")) %>%
dplyr:: select(-`Total Assets`, -avg, -n, -sd, -upper_bound, -lower_bound ) %>%
dplyr::mutate_if(is.numeric, funs(prettyNum(., big.mark=",")))
Table <- Table[,c(which(!colnames(Table) %in% c("pct.chg","real.chg","ctr.chg", "n.fail")), which(colnames(Table) %in% c("pct.chg","real.chg","ctr.chg", "n.fail")))]
return(Table)
}
triage_plausi_DF <- function(DF, template_code, Period_1, Period_2, threshold_per = 30, threshold_mat = 2){
input.date <- rlang::sym(Period_1)
input.date2 <- rlang::sym(Period_2)
cell_names<- cell_names[grep(paste(template_code, sep = ""), cell_names$`Cell Ref Code`),] %>%
dplyr:: select(`Row Name`, `Col Name`,`Cell Ref Code`)
DF[DF == 0] = NA
# Total_Assets = S.02.A %>%
#   dplyr:: filter(`Cell Ref Code` == "S.02.01R0500C0010", `Entity Short Name` == firm, reportingPeriod %in% c(Period_1)) %>%
#   dplyr:: rename("Total Assets" = "Observation Value GBP") %>%
#   dplyr:: select(`Entity Short Name`, reportingPeriod, `Total Assets`)
#
# if(nrow(Total_Assets) != 1){
Total_Assets <- tibble:: as.tibble(25000000)
Summary <- DF %>%
#dplyr:: filter(`Entity Short Name` == firm) %>%
dplyr:: group_by(`Cell Ref Code`, `Entity Short Name`) %>%
dplyr:: arrange(reportingPeriod, .by_group = TRUE) %>%
dplyr:: mutate(pct.chg = round(100 * ((`Observation Value GBP` - lag(`Observation Value GBP`))/lag(`Observation Value GBP`)),2)) %>%
dplyr:: summarise(avg=mean(pct.chg, na.rm = TRUE), n=n(), sd=sd(pct.chg,  na.rm = TRUE)) %>%
dplyr:: mutate_if(is.numeric, funs(replace(., is.na(.), 0))) %>%
dplyr:: mutate(upper_bound = (avg+ 1.6*sd) , lower_bound = (avg - 1.6*sd))
Table <- DF %>%
dplyr:: left_join(cell_names, by = "Cell Ref Code") %>%
#dplyr:: filter(`Entity Short Name` == firm) %>%
tidyr:: drop_na_("Observation Value GBP") %>%
dplyr:: group_by(`Cell Ref Code`, `Entity Short Name`) %>%
dplyr:: arrange(reportingPeriod, .by_group = TRUE) %>%
tidyr:: spread(key = reportingPeriod, value = `Observation Value GBP`) %>%
dplyr:: mutate_if(is.numeric, funs(replace(., is.na(.), 0))) %>%
dplyr:: mutate(pct.chg = round((!! input.date - !! input.date2)/!! input.date2*100,2), real.chg = round((!! input.date - !! input.date2),2)) %>%
dplyr:: mutate(`Total Assets` = ifelse(is.null(Total_Assets$`Total Assets`), 1000000000, Total_Assets$`Total Assets`)) %>%
dplyr:: mutate(ctr.chg = round(real.chg/abs(`Total Assets`)*100,2)) %>%
dplyr:: ungroup() %>%
dplyr:: left_join(Summary, by = c("Entity Short Name", "Cell Ref Code")) %>%
dplyr:: mutate(TEST_Per = ifelse(pct.chg > threshold_per | pct.chg < -threshold_per, "FAIL", "PASS"),
TEST_SD = ifelse(pct.chg > upper_bound | pct.chg < lower_bound, "FAIL", "PASS"),
TEST_Mat = ifelse(ctr.chg > threshold_mat | ctr.chg < -threshold_mat, "FAIL", "PASS")) %>%
dplyr:: mutate(n.fail =  rowCounts(as.matrix(.), value = "FAIL")) %>%
dplyr:: select(-`Total Assets`, -avg, -n, -sd, -upper_bound, -lower_bound ) %>%
dplyr::mutate_if(is.numeric, funs(prettyNum(., big.mark=",")))
Table <- Table[,c(which(!colnames(Table) %in% c("pct.chg","real.chg","ctr.chg", "n.fail")), which(colnames(Table) %in% c("pct.chg","real.chg","ctr.chg", "n.fail")))]
return(Table)
}
x<- triage_plausi_DF(DF = S.02.A, "S.02", Period_1 = "2018Q2", Period_2 = "2018Q3")
View(x)
which(x$TEST_SD == "FAIL")
length(which(x$TEST_SD == "FAIL"))
length(which(x$TEST_SD == "PASS"))
triage_plausi_DF <- function(DF, template_code, Period_1, Period_2, threshold_per = 30, threshold_mat = 2){
input.date <- rlang::sym(Period_1)
input.date2 <- rlang::sym(Period_2)
cell_names<- cell_names[grep(paste(template_code, sep = ""), cell_names$`Cell Ref Code`),] %>%
dplyr:: select(`Row Name`, `Col Name`,`Cell Ref Code`)
DF[DF == 0] = NA
# Total_Assets = S.02.A %>%
#   dplyr:: filter(`Cell Ref Code` == "S.02.01R0500C0010", `Entity Short Name` == firm, reportingPeriod %in% c(Period_1)) %>%
#   dplyr:: rename("Total Assets" = "Observation Value GBP") %>%
#   dplyr:: select(`Entity Short Name`, reportingPeriod, `Total Assets`)
#
# if(nrow(Total_Assets) != 1){
Total_Assets <- tibble:: as.tibble(25000000)
Summary <- DF %>%
#dplyr:: filter(`Entity Short Name` == firm) %>%
dplyr:: group_by(`Cell Ref Code`, `Entity Short Name`) %>%
dplyr:: arrange(reportingPeriod, .by_group = TRUE) %>%
dplyr:: mutate(pct.chg = round(100 * ((`Observation Value GBP` - lag(`Observation Value GBP`))/lag(`Observation Value GBP`)),2)) %>%
dplyr:: summarise(avg=mean(pct.chg, na.rm = TRUE), n=n(), sd=sd(pct.chg,  na.rm = TRUE)) %>%
dplyr:: mutate_if(is.numeric, funs(replace(., is.na(.), 0))) %>%
dplyr:: mutate(upper_bound = (avg+ 2*sd) , lower_bound = (avg - 2*sd))
Table <- DF %>%
dplyr:: left_join(cell_names, by = "Cell Ref Code") %>%
#dplyr:: filter(`Entity Short Name` == firm) %>%
tidyr:: drop_na_("Observation Value GBP") %>%
dplyr:: group_by(`Cell Ref Code`, `Entity Short Name`) %>%
dplyr:: arrange(reportingPeriod, .by_group = TRUE) %>%
tidyr:: spread(key = reportingPeriod, value = `Observation Value GBP`) %>%
dplyr:: mutate_if(is.numeric, funs(replace(., is.na(.), 0))) %>%
dplyr:: mutate(pct.chg = round((!! input.date - !! input.date2)/!! input.date2*100,2), real.chg = round((!! input.date - !! input.date2),2)) %>%
dplyr:: mutate(`Total Assets` = ifelse(is.null(Total_Assets$`Total Assets`), 1000000000, Total_Assets$`Total Assets`)) %>%
dplyr:: mutate(ctr.chg = round(real.chg/abs(`Total Assets`)*100,2)) %>%
dplyr:: ungroup() %>%
dplyr:: left_join(Summary, by = c("Entity Short Name", "Cell Ref Code")) %>%
dplyr:: mutate(TEST_Per = ifelse(pct.chg > threshold_per | pct.chg < -threshold_per, "FAIL", "PASS"),
TEST_SD = ifelse(pct.chg > upper_bound | pct.chg < lower_bound, "FAIL", "PASS"),
TEST_Mat = ifelse(ctr.chg > threshold_mat | ctr.chg < -threshold_mat, "FAIL", "PASS")) %>%
dplyr:: mutate(n.fail =  rowCounts(as.matrix(.), value = "FAIL")) %>%
dplyr:: select(-`Total Assets`, -avg, -n, -sd, -upper_bound, -lower_bound ) %>%
dplyr::mutate_if(is.numeric, funs(prettyNum(., big.mark=",")))
Table <- Table[,c(which(!colnames(Table) %in% c("pct.chg","real.chg","ctr.chg", "n.fail")), which(colnames(Table) %in% c("pct.chg","real.chg","ctr.chg", "n.fail")))]
return(Table)
}
x<- triage_plausi_DF(DF = S.02.A, "S.02", Period_1 = "2018Q2", Period_2 = "2018Q3")
length(which(x$TEST_SD == "FAIL"))
triage_plausi_DF <- function(DF, template_code, Period_1, Period_2, threshold_per = 30, threshold_mat = 2){
input.date <- rlang::sym(Period_1)
input.date2 <- rlang::sym(Period_2)
cell_names<- cell_names[grep(paste(template_code, sep = ""), cell_names$`Cell Ref Code`),] %>%
dplyr:: select(`Row Name`, `Col Name`,`Cell Ref Code`)
DF[DF == 0] = NA
# Total_Assets = S.02.A %>%
#   dplyr:: filter(`Cell Ref Code` == "S.02.01R0500C0010", `Entity Short Name` == firm, reportingPeriod %in% c(Period_1)) %>%
#   dplyr:: rename("Total Assets" = "Observation Value GBP") %>%
#   dplyr:: select(`Entity Short Name`, reportingPeriod, `Total Assets`)
#
# if(nrow(Total_Assets) != 1){
Total_Assets <- tibble:: as.tibble(25000000)
Summary <- DF %>%
#dplyr:: filter(`Entity Short Name` == firm) %>%
dplyr:: group_by(`Cell Ref Code`, `Entity Short Name`) %>%
dplyr:: arrange(reportingPeriod, .by_group = TRUE) %>%
#dplyr:: mutate(pct.chg = round(100 * ((`Observation Value GBP` - lag(`Observation Value GBP`))/lag(`Observation Value GBP`)),2)) %>%
dplyr:: summarise(avg=mean(`Observation Value GBP`, na.rm = TRUE), n=n(), sd=sd(`Observation Value GBP`,  na.rm = TRUE)) %>%
dplyr:: mutate_if(is.numeric, funs(replace(., is.na(.), 0))) %>%
dplyr:: mutate(upper_bound = (avg+ 2*sd) , lower_bound = (avg - 2*sd))
Table <- DF %>%
dplyr:: left_join(cell_names, by = "Cell Ref Code") %>%
#dplyr:: filter(`Entity Short Name` == firm) %>%
tidyr:: drop_na_("Observation Value GBP") %>%
dplyr:: group_by(`Cell Ref Code`, `Entity Short Name`) %>%
dplyr:: arrange(reportingPeriod, .by_group = TRUE) %>%
tidyr:: spread(key = reportingPeriod, value = `Observation Value GBP`) %>%
dplyr:: mutate_if(is.numeric, funs(replace(., is.na(.), 0))) %>%
dplyr:: mutate(pct.chg = round((!! input.date - !! input.date2)/!! input.date2*100,2), real.chg = round((!! input.date - !! input.date2),2)) %>%
dplyr:: mutate(`Total Assets` = ifelse(is.null(Total_Assets$`Total Assets`), 1000000000, Total_Assets$`Total Assets`)) %>%
dplyr:: mutate(ctr.chg = round(real.chg/abs(`Total Assets`)*100,2)) %>%
dplyr:: ungroup() %>%
dplyr:: left_join(Summary, by = c("Entity Short Name", "Cell Ref Code")) %>%
dplyr:: mutate(TEST_Per = ifelse(pct.chg > threshold_per | pct.chg < -threshold_per, "FAIL", "PASS"),
TEST_SD = ifelse(!! input.date > upper_bound | !! input.date < lower_bound, "FAIL", "PASS"),
TEST_Mat = ifelse(ctr.chg > threshold_mat | ctr.chg < -threshold_mat, "FAIL", "PASS")) %>%
dplyr:: mutate(n.fail =  rowCounts(as.matrix(.), value = "FAIL")) %>%
dplyr:: select(-`Total Assets`, -avg, -n, -sd, -upper_bound, -lower_bound ) %>%
dplyr::mutate_if(is.numeric, funs(prettyNum(., big.mark=",")))
Table <- Table[,c(which(!colnames(Table) %in% c("pct.chg","real.chg","ctr.chg", "n.fail")), which(colnames(Table) %in% c("pct.chg","real.chg","ctr.chg", "n.fail")))]
return(Table)
}
x<- triage_plausi_DF(DF = S.02.A, "S.02", Period_1 = "2018Q2", Period_2 = "2018Q3")
View(x)
length(which(x$TEST_SD == "FAIL"))
triage_plausi_DF <- function(DF, template_code, Period_1, Period_2, threshold_per = 30, threshold_mat = 2){
input.date <- rlang::sym(Period_1)
input.date2 <- rlang::sym(Period_2)
cell_names<- cell_names[grep(paste(template_code, sep = ""), cell_names$`Cell Ref Code`),] %>%
dplyr:: select(`Row Name`, `Col Name`,`Cell Ref Code`)
DF[DF == 0] = NA
# Total_Assets = S.02.A %>%
#   dplyr:: filter(`Cell Ref Code` == "S.02.01R0500C0010", `Entity Short Name` == firm, reportingPeriod %in% c(Period_1)) %>%
#   dplyr:: rename("Total Assets" = "Observation Value GBP") %>%
#   dplyr:: select(`Entity Short Name`, reportingPeriod, `Total Assets`)
#
# if(nrow(Total_Assets) != 1){
Total_Assets <- tibble:: as.tibble(25000000)
Summary <- DF %>%
#dplyr:: filter(`Entity Short Name` == firm) %>%
dplyr:: group_by(`Cell Ref Code`, `Entity Short Name`) %>%
dplyr:: arrange(reportingPeriod, .by_group = TRUE) %>%
#dplyr:: mutate(pct.chg = round(100 * ((`Observation Value GBP` - lag(`Observation Value GBP`))/lag(`Observation Value GBP`)),2)) %>%
dplyr:: summarise(avg=mean(`Observation Value GBP`, na.rm = TRUE), n=n(), sd=sd(`Observation Value GBP`,  na.rm = TRUE)) %>%
dplyr:: mutate_if(is.numeric, funs(replace(., is.na(.), 0))) %>%
dplyr:: mutate(upper_bound = (avg+ 2*sd) , lower_bound = (avg - 2*sd))
Table <- DF %>%
dplyr:: left_join(cell_names, by = "Cell Ref Code") %>%
#dplyr:: filter(`Entity Short Name` == firm) %>%
tidyr:: drop_na_("Observation Value GBP") %>%
dplyr:: group_by(`Cell Ref Code`, `Entity Short Name`) %>%
dplyr:: arrange(reportingPeriod, .by_group = TRUE) %>%
tidyr:: spread(key = reportingPeriod, value = `Observation Value GBP`) %>%
dplyr:: mutate_if(is.numeric, funs(replace(., is.na(.), 0))) %>%
dplyr:: mutate(pct.chg = round((!! input.date - !! input.date2)/!! input.date2*100,2), real.chg = round((!! input.date - !! input.date2),2)) %>%
dplyr:: mutate(`Total Assets` = ifelse(is.null(Total_Assets$`Total Assets`), 1000000000, Total_Assets$`Total Assets`)) %>%
dplyr:: mutate(ctr.chg = round(real.chg/abs(`Total Assets`)*100,2)) %>%
dplyr:: ungroup() %>%
dplyr:: left_join(Summary, by = c("Entity Short Name", "Cell Ref Code")) %>%
dplyr:: mutate(TEST_Per = ifelse(pct.chg > threshold_per | pct.chg < -threshold_per, "FAIL", "PASS"),
TEST_SD = ifelse(!! input.date > upper_bound | !! input.date < lower_bound, "FAIL", "PASS"),
TEST_Mat = ifelse(ctr.chg > threshold_mat | ctr.chg < -threshold_mat, "FAIL", "PASS")) %>%
dplyr:: mutate(n.fail =  rowCounts(as.matrix(.), value = "FAIL")) %>%
#dplyr:: select(-`Total Assets`, -avg, -n, -sd, -upper_bound, -lower_bound ) %>%
dplyr::mutate_if(is.numeric, funs(prettyNum(., big.mark=",")))
Table <- Table[,c(which(!colnames(Table) %in% c("pct.chg","real.chg","ctr.chg", "n.fail")), which(colnames(Table) %in% c("pct.chg","real.chg","ctr.chg", "n.fail")))]
return(Table)
}
x<- triage_plausi_DF(DF = S.02.A, "S.02", Period_1 = "2018Q2", Period_2 = "2018Q3")
View(x)
View(All_SII)
CreditUnionRAP::read_CQ_vo()
prettyNum(as.numeric(round(6386795935, 0)))
prettyNum(as.numeric(round(13154322, 0)), big.mark = ",")
prettyNum(as.numeric(round(6386795935, 0)), big.mark = ",")
prettyNum(as.numeric(round(6400000000, 0)), big.mark = ",")
prettyNum(as.numeric(round(640000000, 0)), big.mark = ",")
options(scipen = 999)
prettyNum(as.numeric(round(640000000, 0)), big.mark = ",")
prettyNum(as.numeric(round(6400000000, 0)), big.mark = ",")
prettyNum(as.numeric(round(6400000000, 0)), big.mark = ",")
prettyNum(as.numeric(round(13200000, 0)), big.mark = ",")
install.packages("bookdown")
library(flexdashboard)
library(shinydashboard)
library(shiny)
library(dplyr)
source("./Scripts/HelperFunsShiny.R")
#get 2018 YE data
processedData2018 <- read.csv("N:/DATA/Cross Divisional Work/SkillsDashboard/Data/2018/processedData2018.csv", stringsAsFactors = FALSE)
#get 2019 YE data from submission files and clean
processedData2019 <- getData()
