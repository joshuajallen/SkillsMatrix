dplyr:: filter(Year %in% c(SelectYear))
if(nrow(mytable) > 1){
inputKey <- rlang:: sym(dplyr::last(grouping))
Total <- mytable %>%
dplyr:: group_by(.dots=grouping[-length(grouping)]) %>%
dplyr:: tally() %>%
dplyr:: rename("Total" = "n")
inputKey <- rlang:: sym(dplyr::last(grouping))
# aggregate
summarySt <- mytable %>%
dplyr:: filter(Year %in% c(SelectYear)) %>%
group_by(.dots = c(grouping)) %>%
dplyr:: tally() %>%
dplyr:: rename("Count" = "n") %>%
tidyr:: spread(key = !! inputKey, value = Count) %>%
dplyr:: ungroup() %>%
dplyr:: mutate_if(is.numeric, list(~ replace(., is.na(.), 0))) %>%
dplyr:: inner_join(Total, by = grouping[-length(grouping)])
cols <- colnames(summarySt)[which(!colnames(summarySt) %in% c("Basic (1)",  "Good (2)", "High (3)", "Expert (4)", "Total"))]
summarySt <- summarySt %>%
dplyr:: select(cols, contains("Basic (1)"), contains("Good (2)"), contains("High (3)"), contains("Expert (4)" ), contains("Total"))
} else {
summarySt = NULL
}
return(summarySt)
}
makeStockBar<-function(df, xlabel, ylabel){
xlabel<- rlang:: sym(xlabel)
ylabel<- rlang:: sym(ylabel)
df <- df %>% dplyr:: mutate(Number = as.numeric(Number)) %>% dplyr:: mutate(rank = rank(Number, ties.method = 'first'))
c<-ggplot(df, aes(reorder(!!xlabel, -!! ylabel), y= !! ylabel), group = rank) +
geom_bar(position="dodge", stat="identity", width=0.5, fill="#A51140") +
labs(title="", x = "Count", y = "Skill") +
coord_flip() +
theme_skillsMatrix()
return(c)
}
makeStockBarLevel<-function(df, xlabel = "Specific.Skill", ylabel = "Rank.Now"){
xlabel<- rlang:: sym(xlabel)
ylabel<- rlang:: sym(ylabel)
df <- df %>%
dplyr:: mutate(Score = !! ylabel) %>%
dplyr:: filter(Score != "Not applicable (0)") %>%
dplyr:: mutate(rank = rank(Score, ties.method = 'first')) %>%
arrange(rank) %>%
mutate(Score = factor(Score, levels = sort(unique(Score), decreasing = TRUE)))
labels = c("Basic (1)", "Good (2)", "High (3)","Expert (4)")
p<-
ggplot(df, aes(x = !!xlabel), group = rank) +
geom_bar(aes(fill= Score), width = 0.5) +
labs(title="", x = "Skill", y = "Count") +
theme_skillsMatrix() +
#ggplot2:: scale_fill_discrete(name = "Score", labels = c("Not applicable (0)", "Basic (1)", "Good (2)", "High (3)","Expert (4)")) +
ggplot2::scale_fill_manual(values = unname(boe_cols, length(unique(df$Score)))) +
coord_flip()
return(p)
}
makeStockBarWithLevel<-function(df, xlabel = "Specific.Skill"){
xlabel<- rlang:: sym(xlabel)
#ylabel<- rlang:: sym(ylabel)
#inputKey <- rlang:: sym(dplyr::last(grouping[length(grouping)]))
labels = c("Basic (1)", "Good (2)", "High (3)","Expert (4)")
p<-
ggplot(df, aes(x = reorder(!!xlabel, Position), y= Position), group = rank) +
geom_bar(aes(fill= Score ), width = 0.5, stat = "identity") +
labs(title="", x = "Skill", y = "Count") +
theme_skillsMatrix(base_size = 12) +
#ggplot2:: scale_fill_discrete(name = "Score", labels = c("Not applicable (0)", "Basic (1)", "Good (2)", "High (3)","Expert (4)")) +
ggplot2::scale_fill_manual(values = unname(boe_cols, length(unique(df$Score)))) +
theme(legend.title = element_blank()) +
coord_flip()
return(p)
}
makeBreakdownDT <-  function(df, grouping, SelectHighCat = FALSE, SelectScale=FALSE, SelectTeam=FALSE, filter0Now=FALSE, filter0Future=FALSE){
# if needed filter out 0
if(filter0Now == TRUE){df <- dplyr:: filter(df, Rank.Now.Num != 0)}
if(filter0Future == TRUE){df <- dplyr:: filter(df, Rank.Future.Num != 0)}
if(SelectScale[1] !=FALSE){df <- dplyr:: filter(df, Scale %in% SelectScale)}
if(SelectTeam[1] != FALSE){df <- dplyr:: filter(df, Team %in% SelectTeam)}
if(SelectHighCat[1] != FALSE){df <- dplyr:: filter(df, High.Level.Cat %in% SelectHighCat)}
if(nrow(df) > 1){
inputKey <- rlang:: sym(dplyr::last(grouping))
df <- df %>%
group_by(.dots=c(grouping[-length(grouping)]))%>%
dplyr:: tally() %>%
dplyr:: rename("Count" = "n") %>%
dplyr:: arrange(desc(Count))
}
else{
df = NULL
}
return(df)
}
makeBreakdownChart<-function(df, xlabel,ylabel){
xlabel<- rlang:: sym(xlabel)
ylabel<- rlang:: sym(ylabel)
df <- df %>%
dplyr:: mutate(rank = rank(Count, ties.method = 'first')) %>% dplyr:: ungroup()
p<-
ggplot(df, aes(x = reorder(!!xlabel, !! ylabel), y = Count), group = Year) +
geom_bar(aes(fill= factor(Year), group = Year), width = 0.5, stat = "identity", position = "dodge") +
labs(title="Quantity of people with this skill per year") +
ggplot2::scale_fill_manual(values = unname(boe_cols, length(unique(df$Score)))) +
coord_flip() +
theme_skillsMatrix(base_size = 12) +
theme(panel.grid.major=element_blank())
return(p)
}
# aggregate
# summarySt <- ProcessedData %>%
#   dplyr:: filter(Rank.Now.Num > 0, Year %in% c("2019"), High.Level.Cat %in% c("Analytical tools"), Scale %in% c("Scale G"))
# makeStockBarLevel(df = summarySt, xlabel = "Specific.Skill", ylabel = "Rank.Now.Num")
makeStockDiffDT <-  function(mytable, grouping, SelectHighCat = FALSE, SelectScale=FALSE, SelectTeam=FALSE, filter0Now=FALSE, filter0Future=FALSE){
# if needed filter out 0
if(filter0Now == FALSE){mytable <- dplyr:: filter(mytable, Rank.Now.Num != 0)}
if(filter0Future == FALSE){mytable <- dplyr:: filter(mytable, Rank.Future.Num != 0)}
if(SelectScale[1] !=FALSE){mytable <- dplyr:: filter(mytable, Scale %in% SelectScale)}
if(SelectTeam[1] != FALSE){mytable <- dplyr:: filter(mytable, Team %in% SelectTeam)}
if(SelectHighCat[1] != FALSE){mytable <- dplyr:: filter(mytable, High.Level.Cat %in% SelectHighCat)}
if(nrow(mytable) > 1 & length(unique(mytable$Year)) > 1 ){
DT1 <- mytable %>%
dplyr:: mutate(Latest = (Year==max(Year)),  Previous = (Year==max(Year[!Latest]))) %>%
dplyr:: filter(Latest == TRUE)
RP1 <- rlang:: sym(as.character(unique(DT1$Year)))
DT2 <- mytable %>%
dplyr:: mutate(Latest = (Year==max(Year)), Previous = (Year==max(Year[!Latest]))) %>%
dplyr:: filter(Previous == TRUE)
RP2 <- rlang:: sym(as.character(unique(DT2$Year)))
# aggregate
summarySt1 <- DT1 %>%
dplyr:: filter(Rank.Now.Num > 0) %>%
group_by(.dots = c(grouping)) %>%
#tally(name=paste(as.character(RP1)))
dplyr:: tally()
colnames(summarySt1)[which(colnames(summarySt1) == "n")] <- paste(as.character(RP1))
summarySt2 <- DT2 %>%
dplyr:: filter(Rank.Now.Num > 0) %>%
group_by(.dots = c(grouping)) %>%
dplyr:: tally()
colnames(summarySt2)[which(colnames(summarySt2) == "n")] <- paste(as.character(RP2))
master <- dplyr:: inner_join(summarySt2, summarySt1, by = grouping) %>%
dplyr:: mutate(Change = !! RP1 - !! RP2,
`% Change` = round((!! RP1 - !! RP2)/!! RP1*100, 0))
return(master)
} else {
master = NULL
return(master)
}
}
generate_network_plot <- function(mytable, SelectYear, SelectHighCat = FALSE, SelectScale=FALSE,
SelectTeam=FALSE, filter0Now=FALSE, filter0Future=FALSE){
if(filter0Now == TRUE){mytable <- dplyr:: filter(mytable, Rank.Now.Num != 0)}
if(filter0Future == TRUE){mytable <- dplyr:: filter(mytable, Rank.Future.Num != 0)}
if(SelectScale[1] !=FALSE){mytable <- dplyr:: filter(mytable, Scale %in% SelectScale)}
if(SelectTeam[1] != FALSE){mytable <- dplyr:: filter(mytable, Team %in% SelectTeam)}
if(SelectHighCat[1] != FALSE){mytable <- dplyr:: filter(mytable, High.Level.Cat %in% SelectHighCat)}
# frequently repoted skills
frequentSkills = mytable %>%
dplyr:: group_by(Specific.Skill) %>%
filter(n() >= 5)
#frequentSkills %>% count(Specific.Skill)
word_cors <- frequentSkills %>%
widyr:: pairwise_cor(Specific.Skill, ID, sort = TRUE)
######################################
nodes = frequentSkills %>% plyr:: count("Specific.Skill")
edges = word_cors
nodesWithConnections = nodes %>%
dplyr:: filter(Specific.Skill %in% union(edges$item1,edges$item2))
g = graph_from_data_frame(edges,directed = T,vertices = nodesWithConnections)
v = toVisNetworkData(g)
# take square root so size distribution isn't totally dominated by Ninjas!
v$edges$value = v$edges$correlation * 3
p<- visNetwork(v$nodes,v$edges,height = "800px", width = "800px") %>%
visIgraphLayout(layout = "layout_with_fr",grid="nogrid") %>%
visPhysics(stabilization = F) %>%
visEdges(smooth = F, dashes = T, hoverWidth = 0.3, color = "#A51140") %>%
visNodes(scaling = list(min=20,max=70),
font = list(size = 12), color = "#1E1E1E" ) %>%
visOptions(nodesIdSelection = TRUE,collapse = TRUE, highlightNearest = T) %>%
visInteraction(navigationButtons = TRUE) %>%
visInteraction(tooltipStyle = 'position: fixed;visibility:hidden;padding: 5px;white-space: wrap;
font-family: helvetica;font-size:14px;font-color:black;background-color: white;')
return(p)
}
DSSkills <-
c("Programming tools for analysis (R)",
"Tableau",
"Programming tools for product development (R, Shiny)",
"Database query tools (SQL)",
"Programming tools for big data (e.g. Spark)",
"Version control (git, TFS)",
"Programming notebooks (R markdown)",
"Workflow-based tools ( KNIME, Alteryx)",
"Data science",
"Mathematics",
"Data Engineering",
"Machine Learning",
"Computer science",
"Statistical methods")
DT<- makeGapDT(mytable = SkillsDF, grouping = c("High.Level.Cat", "Specific.Skill", "Year")) %>%
dplyr:: filter(Year %in% "2019", Specific.Skill %in% DSSkills) %>%
dplyr:: arrange(-desc(meanGap))
DT
DT<- dplyr:: filter(SkillsDF, Year %in% "2019", Specific.Skill %in% DSSkills)
DT<- makeGapDT(mytable = DT, grouping = c("High.Level.Cat", "Specific.Skill")) %>%
dplyr:: arrange(-desc(meanGap))
P<- ggplot(DT, aes(x=reorder(Specific.Skill, -meanGap), y= meanGap, label=meanGap)) +
geom_point(stat='identity', fill= "#A51140", size=12)  +
geom_segment(aes(y = 0,
x = Specific.Skill,
yend = meanGap,
xend = Specific.Skill),
color = "#A51140") +
geom_text(color="white", size=4) +
labs(title="",
subtitle="Gaps", y = "Average Skill Gap", x = "Specific.Skill") +
scale_y_continuous(breaks = scales::pretty_breaks(n = 10)) +
coord_flip() +
theme_skillsMatrix(base_size = 12) +
theme(
panel.grid.major.x = element_blank(),
panel.border = element_blank(),
axis.ticks.x = element_blank(),
panel.grid.major = element_blank())
P
DT <- dplyr::filter(SkillsDF, High.Level.Cat %in% "Analytical tools")
DT <- makeTemporalDT(mytable = DT, grouping = c("Specific.Skill","High.Level.Cat", "Year"))
DT <- dplyr::filter(SkillsDF, High.Level.Cat %in% "Analytical tools")
DT <- makeTemporalDT(mytable = DT, grouping = c("Specific.Skill","High.Level.Cat", "Year"))
YearFirst <- rlang:: sym(as.character("2019"))
DT <- DT %>%
tidyr:: drop_na() %>%
dplyr:: select(-meanGap, -Mean_Now) %>%
tidyr:: spread(key = Year, value = Mean_Future) %>%
dplyr:: ungroup()
DT <- dplyr:: arrange(DT, desc(eval("2019")))
DT <- dplyr:: mutate(DT, Specific.Skill=factor(Specific.Skill, levels=rev(Specific.Skill)))
df2 <-  DT %>% dplyr:: select(Specific.Skill, contains("20")) %>% tidyr::gather(group, value, -Specific.Skill)
P<- makeDumbellPlot(DT = DT, df2 = df2, year1 = as.character("2019"),  year2 = as.character("2018"), grouping = "Specific.Skill") +
labs(x="Average Future Score")
P
DT <- dplyr::filter(SkillsDF, High.Level.Cat %in% "Analytical tools")
DT <- makeTemporalDT(mytable = DT, grouping = c("Specific.Skill","High.Level.Cat", "Year"))
YearFirst <- rlang:: sym(as.character("2019"))
DT <- DT %>%
tidyr:: drop_na() %>%
dplyr:: select(-meanGap, -Mean_Now) %>%
tidyr:: spread(key = Year, value = Mean_Future) %>%
dplyr:: ungroup()
DT <- dplyr:: mutate(DT, Specific.Skill=factor(Specific.Skill, levels=rev(Specific.Skill)))
df2 <-  DT %>% dplyr:: select(Specific.Skill, contains("20")) %>% tidyr::gather(group, value, -Specific.Skill)
P<- makeDumbellPlot(DT = DT, df2 = df2, year1 = as.character("2019"),  year2 = as.character("2018"), grouping = "Specific.Skill") +
labs(x="Average Future Score")
P
DT <- dplyr::filter(SkillsDF, High.Level.Cat %in% "Analytical tools")
DT <- makeTemporalDT(mytable = DT, grouping = c("Specific.Skill","High.Level.Cat", "Year"))
YearFirst <- rlang:: sym(as.character("2019"))
DT <- DT %>%
tidyr:: drop_na() %>%
dplyr:: select(-meanGap, -Mean_Now) %>%
tidyr:: spread(key = Year, value = Mean_Future) %>%
dplyr:: ungroup()
DT <- dplyr:: mutate(DT, Specific.Skill=factor(Specific.Skill, levels=rev(Specific.Skill)))
df2 <-  DT %>% dplyr:: select(Specific.Skill, contains("20")) %>% tidyr::gather(group, value, -Specific.Skill)
P<- makeDumbellPlot(DT = DT, df2 = df2, year1 = as.character("2019"),  year2 = as.character("2018"), grouping = "Specific.Skill") +
labs(x="Average Future Score")
P
geom_dumbbell
mytable = DT
grouping = c("Specific.Skill","High.Level.Cat", "Year")
year1<- rlang:: sym("2019")
year2<- rlang:: sym("2018")
grouping<- rlang:: sym(grouping)
grouping = c("Specific.Skill","High.Level.Cat", "Year")
year1<- rlang:: sym("2019")
year2<- rlang:: sym("2018")
grouping<- rlang:: sym(grouping)
mytable = DT
grouping = c("Specific.Skill","High.Level.Cat", "Year")
year1<- rlang:: sym("2019")
year2<- rlang:: sym("2018")
grouping<- rlang:: sym(c("Specific.Skill","High.Level.Cat", "Year"))
grouping<- rlang:: sym(c("Specific.Skill"))
year1<- rlang:: sym("2019")
year2<- rlang:: sym("2018")
grouping<- rlang:: sym(c("Specific.Skill"))
p<- ggplot(DT, aes(y = !! grouping)) +
geom_point(data = df2, aes(x = value, color = group), size = 10) +
geom_dumbbell(aes(x = !! year2, xend = !! year1), size=3.5,
color= unname(boe_cols[3]),
colour_x=unname(boe_cols[1]),
colour_xend = unname(boe_cols[2]),
dot_guide=TRUE,
dot_guide_size=0.25,
size_x= 10,
size_xend = 10) +
labs(x="Average Score", y= grouping,
title="Dumbbell Chart",
subtitle=paste("Average score:",year2, " vs ",year1)) +
theme_skillsMatrix(base_size = 18) +
theme(plot.title = element_text(hjust=0.5, face="bold"),
plot.background=element_rect(fill="#f7f7f7"),
panel.background=element_rect(fill="#f7f7f7"),
panel.grid.minor=element_blank(),
panel.grid.major.y=element_blank(),
panel.grid.major.x=element_line(),
axis.ticks=element_blank(),
legend.position="top",
panel.border=element_blank()) +
scale_x_continuous(breaks = scales::pretty_breaks(n = 8)) +
scale_color_manual(name = "", values = c(unname(boe_cols[1]), unname(boe_cols[2])))#+
p
geom_dumbbell_internal <-
function (mapping = NULL, data = NULL, ..., colour_x = NULL,
size_x = NULL, colour_xend = NULL, size_xend = NULL, dot_guide = FALSE,
dot_guide_size = NULL, dot_guide_colour = NULL, na.rm = FALSE,
show.legend = NA, inherit.aes = TRUE)
geom_dumbbell_internal <- function (mapping = NULL, data = NULL, ..., colour_x = NULL,
size_x = NULL, colour_xend = NULL, size_xend = NULL, dot_guide = FALSE,
dot_guide_size = NULL, dot_guide_colour = NULL, na.rm = FALSE,
show.legend = NA, inherit.aes = TRUE) {
layer(data = data, mapping = mapping, stat = "identity",
geom = GeomDumbbell, position = "identity", show.legend = show.legend,
inherit.aes = inherit.aes, params = list(na.rm = na.rm,
colour_x = colour_x, size_x = size_x, colour_xend = colour_xend,
size_xend = size_xend, dot_guide = dot_guide, dot_guide_size = dot_guide_size,
dot_guide_colour = dot_guide_colour, ...))
}
p<- ggplot(DT, aes(y = !! grouping)) +
geom_point(data = df2, aes(x = value, color = group), size = 10) +
geom_dumbbell_internal(aes(x = !! year2, xend = !! year1), size=3.5,
color= unname(boe_cols[3]),
colour_x=unname(boe_cols[1]),
colour_xend = unname(boe_cols[2]),
dot_guide=TRUE,
dot_guide_size=0.25,
size_x= 10,
size_xend = 10) +
labs(x="Average Score", y= grouping,
title="Dumbbell Chart",
subtitle=paste("Average score:",year2, " vs ",year1)) +
theme_skillsMatrix(base_size = 18) +
theme(plot.title = element_text(hjust=0.5, face="bold"),
plot.background=element_rect(fill="#f7f7f7"),
panel.background=element_rect(fill="#f7f7f7"),
panel.grid.minor=element_blank(),
panel.grid.major.y=element_blank(),
panel.grid.major.x=element_line(),
axis.ticks=element_blank(),
legend.position="top",
panel.border=element_blank()) +
scale_x_continuous(breaks = scales::pretty_breaks(n = 8)) +
scale_color_manual(name = "", values = c(unname(boe_cols[1]), unname(boe_cols[2])))#+
p
shiny::runApp()
#' @return The name of the current environment.
#'
boeGetPathFromUnc <- function(uncPath) {
if(missing(uncPath)) {
stop('UNC path is missing!')
} else {
# In LOCAL environment (Windows) no conversion is required for the UNC path.
return(uncPath)
}
}
runApp()
GeomDumbbell
D
GeomDumbbell <- ggproto("GeomDumbbell", Geom,
required_aes = c("x", "xend", "y"),
non_missing_aes = c("size", "shape",
"point.colour.l", "point.size.l",
"point.colour.r", "point.size.r"),
default_aes = aes(
shape = 19, colour = "black", size = 0.5, fill = NA,
alpha = NA, stroke = 0.5
),
setup_data = function(data, params) {
transform(data, yend = y)
},
draw_group = function(data, panel_scales, coord,
point.colour.l = NULL, point.size.l = NULL,
point.colour.r = NULL, point.size.r = NULL) {
points.l <- data
points.l$colour <- point.colour.l %||% data$colour
points.l$size <- point.size.l %||% (data$size * 2.5)
points.r <- data
points.r$x <- points.r$xend
points.r$colour <- point.colour.r %||% data$colour
points.r$size <- point.size.r %||% (data$size * 2.5)
grid::gList(
ggplot2::GeomSegment$draw_panel(data, panel_scales, coord),
ggplot2::GeomPoint$draw_panel(points.l, panel_scales, coord),
ggplot2::GeomPoint$draw_panel(points.r, panel_scales, coord)
)
},
draw_key = draw_key_point
)
runApp()
GeomDumbbell
runApp()
shiny::runApp()
#' @return The name of the current environment.
#'
boeGetPathFromUnc <- function(uncPath) {
if(missing(uncPath)) {
stop('UNC path is missing!')
} else {
# In LOCAL environment (Windows) no conversion is required for the UNC path.
return(uncPath)
}
}
runApp()
shiny::runApp()
#' Returns the particular format to use when accessing UNC paths from the current environment.
#'
#' @param uncPath A character vector with the path to access in the UNC format.
#'		Note that a backslash needs to be escaped with a backslash.
#'		The following examples of UNC paths are recognized:
#'			\\\\ServerName\\FolderName\\MyFile.csv
#'			//ServerName/FolderName/MyFile.csv
#'
#' @return The name of the current environment.
#'
boeGetPathFromUnc <- function(uncPath) {
if(missing(uncPath)) {
stop('UNC path is missing!')
} else {
# In LOCAL environment (Windows) no conversion is required for the UNC path.
return(uncPath)
}
}
runApp()
runApp()
#' Returns the particular format to use when accessing UNC paths from the current environment.
#'
#' @param uncPath A character vector with the path to access in the UNC format.
#'		Note that a backslash needs to be escaped with a backslash.
#'		The following examples of UNC paths are recognized:
#'			\\\\ServerName\\FolderName\\MyFile.csv
#'			//ServerName/FolderName/MyFile.csv
#'
#' @return The name of the current environment.
#'
boeGetPathFromUnc <- function(uncPath) {
if(missing(uncPath)) {
stop('UNC path is missing!')
} else {
# In LOCAL environment (Windows) no conversion is required for the UNC path.
return(uncPath)
}
}
shiny::runApp()
runApp()
runApp()
runApp()
folderRawData = "N:/Offdata/RM/_Data/TCA"
# load raw data
file.list <- list.files(path = folderRawData, pattern='*.xlsx|*.XLSX',recursive = TRUE,full.names = TRUE)
file.list
# load raw data
file.list <- list.files(path = folderRawData, pattern='*.xlsx|*.XLSX|*.csv',recursive = TRUE,full.names = TRUE)
df.list <- lapply(file.list, read_excel, sheet=2,col_types = "text")
folderRawData = "N:/Offdata/RM/_Data/TCA"
# load raw data
file.list <- list.files(path = folderRawData, pattern='*.xlsx|*.XLSX|*.csv',recursive = TRUE,full.names = TRUE)
file.list
# load raw data
file.list <- list.files(path = folderRawData, pattern='*.csv',recursive = TRUE,full.names = TRUE)
file.list
# load raw data
file.list <- list.files(path = folderRawData, pattern= paste0("Tweb2020", '*.csv'),recursive = TRUE,full.names = TRUE)
file.list
# load raw data
file.list <- list.files(path = folderRawData, pattern= paste0("Tweb[[:digit:]]", '*.csv'),recursive = TRUE,full.names = TRUE)
file.list
library(readr)
df.list <- lapply(file.list, read_csv)
df.list %>% data.table:: rbindlist(df.list)
library(dplyr)
df.list %>% data.table:: rbindlist(df.list)
df.list
df.list %>% data.table:: rbindlist(df.list)
df.list <- lapply(file.list, read_csv) %>% data.table:: rbindlist(df.list)
file.list
df.list <- lapply(file.list, read_csv) %>% rbind()
df.list
df.list <- lapply(file.list, read_csv) %>% bind_rows()
# load raw data
file.list <- list.files(path = folderRawData, pattern= paste0("Tweb[[:digit:]]", '*.csv'),recursive = TRUE,full.names = TRUE)
file.list
## add ramdom identifier
names(df.list) <- 1:length(file.list)
rawData <- dplyr:: bind_rows(df.list, .id = "id")[,1:9]
df.list
df.list
rawData <- dplyr:: bind_rows(df.list, .id = "id")
df.list <- lapply(file.list, read.csv)
df.list
## add ramdom identifier
names(df.list) <- 1:length(file.list)
rawData <- dplyr:: bind_rows(df.list, .id = "id")[,1:9]
View(rawData)
# load raw data
file.list <- list.files(path = folderRawData, pattern= paste0("Tweb[[:digit:]]", '*.csv'),recursive = TRUE,full.names = TRUE)
file.list
df.list <- lapply(file.list, read.csv)
## add ramdom identifier
names(df.list) <- 1:length(file.list)
rawData <- dplyr:: bind_rows(df.list, .id = "id")
rawData
warnings()
